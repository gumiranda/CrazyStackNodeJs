import {
    fake{{pascalCase name}}Entity,
    fake{{pascalCase name}}Paginated,
} from "@/slices/{{camelCase name}}/entities/{{pascalCase name}}Entity.spec";
import { Repository } from "@/application/infra/contracts/repository";
import { Query } from "@/application/types";
import MockDate from "mockdate";
import { mock, MockProxy } from "jest-mock-extended";
import { {{pascalCase name}}Repository } from "./{{camelCase name}}Repository";

describe("{{pascalCase name}} Mongo Repository", () => {
    let fakeQuery: Query;
    let testInstance: {{pascalCase name}}Repository;
    let repository: MockProxy<Repository>;
    beforeAll(async () => {
        fakeQuery = { fields: { name: "123" }, options: {} };
        MockDate.set(new Date());
        repository = mock<Repository>();
        repository.add.mockResolvedValue(fake{{pascalCase name}}Entity);
        repository.getOne.mockResolvedValue(fake{{pascalCase name}}Entity);
        repository.update.mockResolvedValue(fake{{pascalCase name}}Entity);
        repository.getPaginate.mockResolvedValue(fake{{pascalCase name}}Paginated?.{{camelCase name}}s);
        repository.getCount.mockResolvedValue(fake{{pascalCase name}}Paginated?.total);
        repository.deleteOne.mockResolvedValue(true);
    });
    beforeEach(async () => {
        testInstance = new {{pascalCase name}}Repository(repository);
    });
    afterAll(async () => {
        MockDate.reset();
    });
    test("should call add of add{{pascalCase name}} with correct values", async () => {
        await testInstance.add{{pascalCase name}}(fake{{pascalCase name}}Entity);
        expect(repository.add).toHaveBeenCalledWith(fake{{pascalCase name}}Entity);
        expect(repository.add).toHaveBeenCalledTimes(1);
    });
    test("should return a new {{camelCase name}} created when add{{pascalCase name}} insert it", async () => {
        const result = await testInstance.add{{pascalCase name}}(fake{{pascalCase name}}Entity);
        expect(result).toEqual(fake{{pascalCase name}}Entity);
    });
    test("should return null when add{{pascalCase name}} returns null", async () => {
        repository.add.mockResolvedValueOnce(null);
        const result = await testInstance.add{{pascalCase name}}(fake{{pascalCase name}}Entity);
        expect(result).toBeNull();
    });
    test("should rethrow if add of add{{pascalCase name}} throws", async () => {
        repository.add.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.add{{pascalCase name}}(fake{{pascalCase name}}Entity);
        await expect(result).rejects.toThrow("Error");
    });
    test("should rethrow if update of update{{pascalCase name}} throws", async () => {
        repository.update.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.update{{pascalCase name}}(fakeQuery, fake{{pascalCase name}}Entity);
        await expect(result).rejects.toThrow("Error");
    });
    test("should call update of update{{pascalCase name}} with correct values", async () => {
        await testInstance.update{{pascalCase name}}(fakeQuery, fake{{pascalCase name}}Entity);
        expect(repository.update).toHaveBeenCalledWith(
            fakeQuery?.fields,
            fake{{pascalCase name}}Entity
        );
        expect(repository.update).toHaveBeenCalledTimes(1);
    });
    test("should return a {{camelCase name}} updated when update{{pascalCase name}} update it", async () => {
        const result = await testInstance.update{{pascalCase name}}(fakeQuery, fake{{pascalCase name}}Entity);
        expect(result).toEqual(fake{{pascalCase name}}Entity);
    });
    test("should return a {{camelCase name}} updated when update{{pascalCase name}} update it when i pass null", async () => {
        const result = await testInstance.update{{pascalCase name}}(null as any, fake{{pascalCase name}}Entity);
        expect(result).toEqual(fake{{pascalCase name}}Entity);
    });
    test("should return null when update{{pascalCase name}} returns null", async () => {
        repository.update.mockResolvedValueOnce(null);
        const result = await testInstance.update{{pascalCase name}}(fakeQuery, fake{{pascalCase name}}Entity);
        expect(result).toBeNull();
    });
    test("should rethrow if update of update{{pascalCase name}} throws", async () => {
        repository.update.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.update{{pascalCase name}}(fakeQuery, fake{{pascalCase name}}Entity);
        await expect(result).rejects.toThrow("Error");
    });
    test("should call delete of delete{{pascalCase name}} with correct values", async () => {
        await testInstance.delete{{pascalCase name}}(fakeQuery);
        expect(repository.deleteOne).toHaveBeenCalledWith(fakeQuery?.fields);
        expect(repository.deleteOne).toHaveBeenCalledTimes(1);
    });
    test("should return a new {{camelCase name}} created when delete{{pascalCase name}} insert it", async () => {
        const result = await testInstance.delete{{pascalCase name}}(fakeQuery);
        expect(result).toEqual(true);
    });
    test("should return null when delete{{pascalCase name}} returns null", async () => {
        repository.deleteOne.mockResolvedValueOnce(null);
        const result = await testInstance.delete{{pascalCase name}}(fakeQuery);
        expect(result).toBeNull();
    });
    test("should rethrow if delete of delete{{pascalCase name}} throws", async () => {
        repository.deleteOne.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.delete{{pascalCase name}}(fakeQuery);
        await expect(result).rejects.toThrow("Error");
    });
    test("should call load of load{{pascalCase name}} with correct values", async () => {
        await testInstance.load{{pascalCase name}}(fakeQuery);
        expect(repository.getOne).toHaveBeenCalledWith(
            fakeQuery?.fields,
            fakeQuery?.options
        );
        expect(repository.getOne).toHaveBeenCalledTimes(1);
    });
    test("should return a {{camelCase name}} when load{{pascalCase name}} loaded it", async () => {
        const result = await testInstance.load{{pascalCase name}}(fakeQuery);
        expect(result).toEqual(fake{{pascalCase name}}Entity);
    });
    test("should return null when load{{pascalCase name}} returns null", async () => {
        repository.getOne.mockResolvedValueOnce(null);
        const result = await testInstance.load{{pascalCase name}}(fakeQuery);
        expect(result).toBeNull();
    });
    test("should return null when load{{pascalCase name}} returns null passing null as parameter", async () => {
        repository.getOne.mockResolvedValueOnce(null);
        const result = await testInstance.load{{pascalCase name}}(null as any);
        expect(result).toBeNull();
    });
    test("should rethrow if load of load{{pascalCase name}} throws", async () => {
        repository.getOne.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.load{{pascalCase name}}(fakeQuery);
        await expect(result).rejects.toThrow("Error");
    });
    test("should call getCount of load{{pascalCase name}}ByPage with correct values", async () => {
        await testInstance.load{{pascalCase name}}ByPage(fakeQuery);
        expect(repository.getCount).toHaveBeenCalledWith(fakeQuery?.fields);
        expect(repository.getCount).toHaveBeenCalledTimes(1);
    });
    test("should call getPaginate of load{{pascalCase name}}ByPage with correct values", async () => {
        await testInstance.load{{pascalCase name}}ByPage(fakeQuery);
        expect(repository.getPaginate).toHaveBeenCalledWith(
            0,
            fakeQuery?.fields,
            {
                createdAt: -1,
            },
            10,
            {}
        );
        expect(repository.getPaginate).toHaveBeenCalledTimes(1);
    });
    test("should return a {{camelCase name}}ByPage when load{{pascalCase name}}ByPage loaded it", async () => {
        const result = await testInstance.load{{pascalCase name}}ByPage(fakeQuery);
        expect(result).toEqual(fake{{pascalCase name}}Paginated);
    });
    test("should return null when load{{pascalCase name}}ByPage returns null", async () => {
        repository.getPaginate.mockResolvedValueOnce(null);
        repository.getCount.mockResolvedValueOnce(0);
        const result = await testInstance.load{{pascalCase name}}ByPage(fakeQuery);
        expect(result).toEqual({ {{camelCase name}}s: null, total: 0 });
    });
    test("should return null when load{{pascalCase name}}ByPage returns null passing null as parameter", async () => {
        repository.getPaginate.mockResolvedValueOnce(null);
        repository.getCount.mockResolvedValueOnce(0);
        const result = await testInstance.load{{pascalCase name}}ByPage(null as any);
        expect(result).toEqual({ {{camelCase name}}s: null, total: 0 });
    });
    test("should rethrow if load of load{{pascalCase name}}ByPage throws", async () => {
        repository.getPaginate.mockRejectedValueOnce(new Error("Error"));
        const result = testInstance.load{{pascalCase name}}ByPage(fakeQuery);
        await expect(result).rejects.toThrow("Error");
    });
});
